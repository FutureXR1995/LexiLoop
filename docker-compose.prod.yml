# Production Docker Compose with HTTPS support
version: '3.8'

services:
  # Nginx Reverse Proxy with SSL
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: lexiloop-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
      - ai-service
    networks:
      - lexiloop
    restart: unless-stopped
    environment:
      - NGINX_HOST=lexiloop.com
      - NGINX_PORT=80

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: lexiloop-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-lexiloop}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-lexiloop_secure_password}
      POSTGRES_DB: ${POSTGRES_DB:-lexiloop}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/backups:/backups
    networks:
      - lexiloop
    restart: unless-stopped
    command: |
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.7
      -c wal_buffers=16MB
      -c default_statistics_target=100

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: lexiloop-redis
    ports:
      - "6379:6379"
    command: |
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD:-redis_secure_password}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - lexiloop
    restart: unless-stopped
    sysctls:
      - net.core.somaxconn=65535

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: lexiloop-frontend
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://api.lexiloop.com
      - NEXT_PUBLIC_AI_SERVICE_URL=https://ai.lexiloop.com
      - NEXT_PUBLIC_DOMAIN=lexiloop.com
    depends_on:
      - backend
    networks:
      - lexiloop
    restart: unless-stopped
    read_only: true
    tmpfs:
      - /tmp
      - /app/.next/cache

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: lexiloop-backend
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-lexiloop}:${POSTGRES_PASSWORD:-lexiloop_secure_password}@postgres:5432/${POSTGRES_DB:-lexiloop}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379
      - JWT_SECRET=${JWT_SECRET:-your-super-secure-jwt-secret-key}
      - CORS_ORIGIN=https://lexiloop.com,https://www.lexiloop.com
      - RATE_LIMIT_ENABLED=true
      - LOG_LEVEL=info
    depends_on:
      - postgres
      - redis
    networks:
      - lexiloop
    restart: unless-stopped
    read_only: true
    tmpfs:
      - /tmp
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  # AI Service
  ai-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile
    container_name: lexiloop-ai
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - AZURE_SPEECH_KEY=${AZURE_SPEECH_KEY}
      - AZURE_SPEECH_REGION=${AZURE_SPEECH_REGION:-eastus}
      - LOG_LEVEL=info
    depends_on:
      - redis
    networks:
      - lexiloop
    restart: unless-stopped
    read_only: true
    tmpfs:
      - /tmp
      - /app/generated_audio
    cap_drop:
      - ALL

  # Monitoring and Logging
  prometheus:
    image: prom/prometheus:latest
    container_name: lexiloop-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - lexiloop
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: lexiloop-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin_secure_password}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - lexiloop
    restart: unless-stopped

  # Log aggregation
  loki:
    image: grafana/loki:latest
    container_name: lexiloop-loki
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - lexiloop
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

networks:
  lexiloop:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16